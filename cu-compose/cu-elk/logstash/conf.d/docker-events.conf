input {
  pipe {
    command => "docker events --filter 'event=destroy'"
    type => 'docker-events'
  }
}

filter {
  if [type] == "docker-events" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{WORD:class} %{WORD:action} %{WORD:containerID} (%{GREEDYDATA:end_message})" }
    }
    mutate {
      gsub => [
        "end_message", "[) (]", "",
        "end_message", "(.*?)," , "",
        "end_message", "name=" , ""
      ]
    }
  }
}

output {
  if [type] == "docker-events" and [class] == 'container' {
    http {
      format=>"message"
      http_method => post
      url => 'http://elasticsearch:9200/dockbeat-*/_delete_by_query'
      # can add multiple indexe with 'http://elasticsearch:9200/dockbeat-*,tralala-*/_delete_by_query
      content_type => "application/json; charset=UTF-8"
      message => '{"query":{"term":{"containerID": "%{containerID}"}}}'
      #message => '{"query":{"bool":{"should":[{"term":{"containerID": "%{containerID}"},{"term":{"beat.name": "%{end_message}"}}}}}}'
    }
    http {
      format=>"message"
      http_method => post
      url => 'http://elasticsearch:9200/metricbeat-*/_delete_by_query'
      # can add multiple indexe with 'http://elasticsearch:9200/dockbeat-*,tralala-*/_delete_by_query
      content_type => "application/json; charset=UTF-8"
      message => '{"query":{"term":{"beat.name": "%{end_message}"}}}'
      #message => '{"query":{"bool":{"should":[{"term":{"containerID": "%{containerID}"},{"term":{"beat.name": "%{end_message}"}}}}}}'
    }
  } else {
    stdout { codec => rubydebug }
  }
}
